<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.sist.web.dao.UserDao">
	
	<resultMap type="com.sist.web.model.User" id="userResultMap">
		<id column="USER_ID" property="userId" />
		<result column="USER_PWD" property="userPwd" />
		<result column="USER_NAME" property="userName" />
		<result column="USER_PHONE" property="userPhone" />
		<result column="USER_EMAIL" property="userEmail" />
		<result column="USER_INTRO" property="userIntro" />
		<result column="REG_DATE" property="regDate" />
		<result column="STATUS" property="status" /> 
		<result column="FILE_NAME" property="fileName" />
		<result column="FOLLOWING_ID" property="followingId" />
	</resultMap>
	
	<resultMap type="com.sist.web.model.UserFile" id="userFileResultMap">
		<result column="USER_ID" property="userId" />
		<result column="FILE_NUM" property="fileNum" />
		<result column="FILE_ORG_NAME" property="fileOrgName" />
		<result column="FILE_NAME" property="fileName" />
		<result column="FILE_EXT" property="fileExt" />
		<result column="FILE_SIZE" property="fileSize" />
		<result column="REG_DATE" property="regDate" />
	</resultMap>
		
	
	<!-- 유저 select -->
	<select id="userSelect" parameterType="String" resultMap="userResultMap">
		SELECT USER_ID AS USER_ID,
		       NVL(USER_PWD, '') AS USER_PWD,
		       NVL(USER_NAME, '') AS USER_NAME,
		       NVL(USER_PHONE, '') AS USER_PHONE,
		       NVL(USER_EMAIL, '') AS USER_EMAIL,
		       NVL(USER_INTRO, '') AS USER_INTRO,
		       NVL(TO_CHAR(REG_DATE, 'YYYY/MM/DD HH24:MI:SS'), '') AS REG_DATE,
		       NVL(STATUS, '') AS STATUS
		FROM INS_USER
		WHERE USER_ID = #{value}
	</select>
	
	
	<!-- id와 email 중복 count (id, email) -->
	<select id="userCount" parameterType="String" resultType="int">
		SELECT COUNT(USER_ID)
		  FROM INS_USER
		 WHERE 1=1 
		   AND USER_ID = #{value}
		    OR USER_EMAIL = #{value}
	</select>
	
	
	<!-- 회원가입 -->
	<insert id="userInsert" parameterType="com.sist.web.model.User">
		INSERT INTO INS_USER (
					            USER_ID,
					            USER_PWD,
					            USER_NAME,
					            USER_PHONE,
					            USER_EMAIL,
					            USER_INTRO,
					            REG_DATE,
					            STATUS
		) VALUES (
		        #{userId},
		        #{userPwd},
		        #{userName},
		        #{userPhone},
		        #{userEmail},
		        #{userIntro},
		        SYSDATE,
		        #{status}
		) 
	</insert>
	
	
	<!-- 비밀번호 찾기 / 회원 update 중복 이메일--> <!-- User 객체로 받아와서 if 조건에 검색 -->
	<select id="findUser" parameterType="String" resultType="String">
		SELECT USER_EMAIL
		  FROM INS_USER
		 WHERE 1=1 
		   AND USER_ID = #{value}
		    OR USER_EMAIL = #{value}
	</select>
	
	
	<!-- 회원 정보 수정 update -->
	<update id="userUpdate" parameterType="com.sist.web.model.User">
		UPDATE INS_USER
		SET
		    USER_PWD = #{userPwd},
		    USER_NAME = #{userName},
		    USER_PHONE = #{userPhone},
		    USER_EMAIL = #{userEmail},
		    USER_INTRO = #{userIntro},
		    STATUS = 'Y'
		WHERE   1=1
		    AND USER_ID = #{userId}
	</update>
	
	<!-- 회원 프로필 사진 select -->
	<select id="userFileSelect" parameterType="com.sist.web.model.UserFile" resultMap="userFileResultMap">
		SELECT USER_ID,
		       NVL(FILE_NUM, 0),
		       NVL(FILE_ORG_NAME, ''),
		       NVL(FILE_NAME, ''),
		       NVL(FILE_EXT, ''),
		       NVL(FILE_SIZE, 0),
		       NVL(REG_DATE, '')
		  FROM INS_USER_FILE 
		 WHERE 1=1
		   AND USER_ID = #{userId}
	</select>
	
	
	<!-- 회원 프로필 사진 insert -->
	<insert id="userFileInsert" parameterType="com.sist.web.model.UserFile">
		INSERT INTO INS_USER_FILE (
		    USER_ID,
		    FILE_NUM,
		    FILE_ORG_NAME,
		    FILE_NAME,
		    FILE_EXT,
		    FILE_SIZE,
		    REG_DATE
		) VALUES (
		    #{userId},
		    (SELECT NVL(MAX(FILE_NUM),0)+1 FROM INS_USER_FILE WHERE USER_ID = #{userId}),
		    #{fileOrgName},
		    #{fileName},
		    #{fileExt},
		    #{fileSize},
		    SYSDATE
		) 
	</insert>
	
	
	<!-- 회원 프로필 사진 delete -->
	<delete id="userFileDelete" parameterType="String">
		DELETE INS_USER_FILE
		 WHERE USER_ID = #{value} 
	</delete>
	
	<!-- 회원 select + 프로필 사진 name 까지 한명 조회 -->
	<select id="userAllSelect" parameterType="String" resultMap="userResultMap">
		SELECT A.USER_ID AS USER_ID,
		       NVL(B.FILE_NAME, '') AS FILE_NAME,
		       NVL(A.USER_PWD, '') AS USER_PWD,
		       NVL(A.USER_NAME, '') AS USER_NAME,
		       NVL(A.USER_PHONE, '') AS USER_PHONE,
		       NVL(A.USER_EMAIL, '') AS USER_EMAIL,
		       NVL(A.USER_INTRO, '') AS USER_INTRO,
		       NVL(TO_CHAR(A.REG_DATE, 'YYYY/MM/DD HH24:MI:SS'), '') AS REG_DATE,
		       NVL(A.STATUS, '') AS STATUS
		  FROM INS_USER A
		  LEFT JOIN INS_USER_FILE B
		    ON A.USER_ID = B.USER_ID
		 WHERE 1=1
		   AND A.USER_ID = #{value}
	</select>
	
	<!-- 회원 검색 select -->
	<select id="userSearchSelect" parameterType="com.sist.web.model.User" resultMap="userResultMap">
		SELECT A.USER_ID,
		       NVL(A.USER_PWD, '') AS USER_PWD,
		       NVL(A.USER_NAME, '') AS USER_NAME,
		       NVL(A.USER_PHONE, '') AS USER_PHONE,
		       NVL(A.USER_EMAIL, '') AS USER_EMAIL,
		       NVL(A.USER_INTRO, '') AS USER_INTRO,
		       NVL(TO_CHAR(A.REG_DATE, 'YYYY/MM/DD HH24:MI:SS'), '') AS REG_DATE,
		       NVL(A.STATUS, '') AS STATUS,
		       NVL(B.FILE_NAME, '') AS FILE_NAME
		  FROM INS_USER A, INS_USER_FILE B
		 WHERE 1=1
		   AND A.USER_ID = B.USER_ID(+)
		<if test='userId != null and userId != "" and userName != null and userName != "" and userIntro != null and userIntro != ""'>
		   AND (A.USER_ID LIKE '%' || #{userId} ||'%'
		        OR A.USER_NAME LIKE '%' || #{userName} ||'%'
		        OR A.USER_INTRO LIKE '%' || #{userIntro} ||'%') 
		</if>
	</select>
	
	<!-- 회원님을 위한 추천 회원 조회 (본인, 팔로잉 제외) -->
	<select id="recommendedMembers" parameterType="String" resultMap="userResultMap">
		SELECT USER_ID,
		       USER_NAME,
		       STATUS,
		       FILE_NAME
		  FROM (
		        SELECT A.USER_ID,
		               NVL(A.USER_NAME, '') AS USER_NAME,
		               NVL(A.STATUS, '') AS STATUS,
		               NVL(B.FILE_NAME, '') AS FILE_NAME
		          FROM INS_USER A
		               LEFT JOIN INS_USER_FILE B ON A.USER_ID = B.USER_ID
		         WHERE A.USER_ID != #{value} 
		           AND A.USER_ID NOT IN (SELECT FOLLOWING_ID
		                                   FROM INS_FOLLOW
		                                  WHERE USER_ID = #{value} )
		         ORDER BY DBMS_RANDOM.VALUE         
		        )
		 WHERE ROWNUM <![CDATA[<=]]> 5 
	</select>
	
	
	<!-- 팔로우 insert -->
	<insert id="followInsert" parameterType="com.sist.web.model.User">
		INSERT INTO INS_FOLLOW (
		    USER_ID,
		    FOLLOWING_ID
		) VALUES (
		    #{userId},
		    #{followingId}
		)
	</insert>
	
	<!-- 팔로우 취소 delete -->
	<delete id="followCancelDelete" parameterType="com.sist.web.model.User">
		DELETE INS_FOLLOW
		 WHERE USER_ID = #{userId}
		   AND FOLLOWING_ID = #{followingId} 
	</delete>
	
	<!-- 팔로잉 수 -->
	<select id="followingCnt" parameterType="String" resultType="long">
		SELECT COUNT(FOLLOWING_ID)
		  FROM INS_FOLLOW
		 WHERE USER_ID = #{value} 
	</select>
	
	<!-- 유저 팔로잉 list -->
	<select id="followingList" parameterType="String" resultMap="userResultMap">
		SELECT USER_ID,
		       USER_NAME,
		       STATUS,
		       FILE_NAME
		  FROM (
		        SELECT A.USER_ID,
		               NVL(A.USER_NAME, '') AS USER_NAME,
		               NVL(A.STATUS, '') AS STATUS,
		               NVL(B.FILE_NAME, '') AS FILE_NAME
		          FROM INS_USER A
		               LEFT JOIN INS_USER_FILE B ON A.USER_ID = B.USER_ID
		         WHERE A.USER_ID IN (SELECT FOLLOWING_ID
		                               FROM INS_FOLLOW
		                              WHERE USER_ID = #{value})
		         ORDER BY A.USER_ID ASC )
	</select>
	
	
	<select id="followerList" parameterType="String" resultMap="userResultMap">
		SELECT USER_ID,
		       USER_NAME,
		       STATUS,
		       FILE_NAME
		  FROM (
		        SELECT A.USER_ID,
		               NVL(A.USER_NAME, '') AS USER_NAME,
		               NVL(A.STATUS, '') AS STATUS,
		               NVL(B.FILE_NAME, '') AS FILE_NAME
		          FROM INS_USER A
		               LEFT JOIN INS_USER_FILE B ON A.USER_ID = B.USER_ID
		         WHERE A.USER_ID IN (SELECT USER_ID
		                               FROM INS_FOLLOW
		                              WHERE FOLLOWING_ID = #{value} )
		         ORDER BY A.USER_ID ASC ) 
	</select>
	
	
	
</mapper>
